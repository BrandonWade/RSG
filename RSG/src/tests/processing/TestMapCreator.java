package tests.processing;

import rsg.objects.Map;
import rsg.persistence.Services;
import rsg.persistence.WorldInfo;
import rsg.processing.MapCreationException;
import rsg.processing.MapCreator;
import tests.persistence.DataAccessStub;

//Since these errors can never be generated by a user, we throw exceptions so that we, the programmers, know that
//  we have not properly created a map. This will ensure that any map that can't be handled is known to us so we 
//  can update the map accordingly. This ensures that all maps meet our standards to be loaded and the player 
//  doeesn't have a bad experience because pieces or sizes aren't being drawn properly.

import junit.framework.TestCase;

public class TestMapCreator extends TestCase
{
	Map map;
	
	public TestMapCreator (String arg0) 
	{
		super(arg0);
	}
	
	public void setUp()
	{
		Services.createDataAccess(new DataAccessStub("STUB"));
		WorldInfo.initializeWorld();
	}
	
	public void tearDown()
	{
		Services.closeDataAccess();
	}
	
	public boolean checkThoroughly(Map map)
	{
		if (map != null)
		{
			for (int i = 0; i < Map.getRows(); i++)
			{
				for (int j = 0; j < Map.getCols(); j++)
				{
					assertNotNull(map.getTileImages(i, j));
					assertNotSame(map.getTileImages(i, j).size(), 0);
				}
			}
		}
		
		return true;
	}
	
	public void testValidMapContents()
	{
		System.out.println("Starting valid map contents testing...");
		//This map contains all singular and several multiple images for our game. Every image is loaded at least once.
		assertTrue(checkThoroughly(map));
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap0.txt");
			assertTrue(checkThoroughly(map));
		}
		catch(MapCreationException e)
		{
			e.printStackTrace();
			fail("Map testMap0 failed to load.");
		}
		
		System.out.println("Successfully finished valid map contents testing.\n");
	}
	
	public void testBadCharacters()
	{
		System.out.println("Started bad character's in map testing...");
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap2.txt"); 
			fail("Map should not have been created because of faulty code in map design");
		}
		catch(MapCreationException e)
		{
		}
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap3.txt"); 
			fail("Map should not have been created because of faulty code in map design");
		}
		catch(MapCreationException e)
		{
		}
		System.out.println("Successfully finished bad character's map testing.\n");
	}
	
	public void testProperColumnLength()
	{
		System.out.println("Started proper map column testing...");
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap4.txt"); 
			fail("Map did not have a consistent amount of columns relative to the map's metadata");
		}
		catch(MapCreationException e)
		{
		}
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap5.txt"); 
			fail("Map did not have a consistent amount of columns relative to the map's metadata");
		}
		catch(MapCreationException e)
		{
		}
		System.out.println("Successfully finished proper map column testing.\n");
	}
	
	public void testProperRowLength()
	{
		System.out.println("Started testing proper map row testing...");
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap6.txt"); 
			fail("Map did not have a consistent amount of rows relative to the map's metadata");
		}
		catch(MapCreationException e)
		{
		}
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap7.txt"); 
			fail("Map did not have a consistent amount of rows relative to the map's metadata");
		}
		catch(MapCreationException e)
		{
		}	
		System.out.println("Successfully finished proper map row testing.\n");
	}
	
	public void testMapMetaData()
	{
		System.out.println("Started testing map meta data...");
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap8.txt");
			fail("Should not have been able to read improper map metadata. Missing one value");
		}
		catch (MapCreationException e)
		{
		}
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap9.txt");
			fail("Should not have been able to read improper map metadata. No Metadata is in the file.");
		}
		catch (MapCreationException e)
		{
		}
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap10.txt");
			fail("Should not have been able to read improper map metadata. Too many values of metadata.");
		}
		catch (MapCreationException e)
		{
		}	
		
		try
		{
			map = MapCreator.createMap("res/MaploaderTestMaps/testMap11.txt");
			fail("Should not have been able to read improper map metadata. Metadata values must be greater than 0.");
		}
		catch (MapCreationException e)
		{
		}	
		System.out.println("Successfully finished testing map meta data.\n");
	}
}